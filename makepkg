#!/bin/bash

export CFLAGS='-ffast-math'
export FFLAGS=$CFLAGS
export CXXFLAGS=$CFLAGS

# get the path to the current python site-packages directory
# adapted from virtualenvwrapper (https://virtualenvwrapper.readthedocs.io)
get_site_packages_dir() {
  python -c \
    'import distutils.sysconfig; print(distutils.sysconfig.get_python_lib())'
}

# extra preparation when compiling on OSG submit hosts
if [[ $(hostname) =~ opensciencegrid.org|osgconnect.net ]]; then
  # load lmod
  source /cvmfs/oasis.opensciencegrid.org/osg/modules/lmod/current/init/bash

  # load necessary modules:
  #  - recent version of gcc, for c++11 among other things
  #  - recent version of cmake
  #  - boost for c++ codes
  #  - hdf5 for trento
  #  - python and packages
  module purge
  module load gcc/6.2.0 python/3.5.2 all-pkgs cmake boost/1.62.0-cxx11 hdf5/1.8.13-cxx11

  # save the path of the modules site-packages
  osg_modules_site_packages_dir=$(get_site_packages_dir)

  # the modules set the standard environment variables CPATH and LIBRARY_PATH
  # set corresponding variables for cmake
  export CMAKE_INCLUDE_PATH=$CPATH
  export CMAKE_LIBRARY_PATH=$LIBRARY_PATH

  # set compiler architecture flags
  arch_flags='-march=x86-64 -mtune=intel'
  export CFLAGS="$arch_flags $CFLAGS"
  export FFLAGS="$arch_flags $FFLAGS"
  export CXXFLAGS="$arch_flags $CXXFLAGS"

  # explicitly set fortran compiler to override cmake default
  export FC='gfortran'

  # set linker flags to prefer the module versions of libraries to the system versions
  # the linker reads $LIBRARY_PATH but gives it lower priority than the standard paths
  # this uses -L flags to give $LIBRARY_PATH higher priority
  export LDFLAGS="-L${LIBRARY_PATH//:/ -L}"
fi

# read optional argument destdir (where to place package file)
# default is the current directory
destdir=${1-.}

# create a temporary directory for installing files
installdir=$(mktemp --directory)
# and ensure it's cleaned on exit
trap "rm -r $installdir" EXIT

pkgname='hic-osg'
pkgdir="$installdir/$pkgname"

# create python virtual environment to install into
python -m venv --without-pip $pkgdir
# delete unnecessary activate scripts
rm $pkgdir/bin/activate*
# activate the venv
export PATH="$pkgdir/bin:$PATH"
# add osg modules to python path
# similar to 'add2virtualenv' in virtualenvwrapper
# https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html#add2virtualenv
echo $osg_modules_site_packages_dir > $(get_site_packages_dir)/osg_modules.pth

# build each model
for i in models/*/; do
  pushd $i

  # determine whether to build with CMake or python
  if [[ -f CMakeLists.txt ]]; then
    # create build directory and run cmake if necessary
    if [[ -d build ]]; then
      cd build
    else
      mkdir build && cd build
      cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/ \
        .. || exit 1
    fi

    # compile and install to the temporary directory
    make --jobs=$(nproc) DESTDIR=$pkgdir install || exit 1
  elif [[ -f setup.py ]]; then
    # install python packages
    python setup.py install || exit 1
  else
    echo "unknown build system for model $i"
    exit 1
  fi

  popd
done

# install the event runner script
install -v models/run-events $pkgdir/bin

# create tgz for distributing to each job
tar --verbose --create --gzip --file $destdir/$pkgname.tar.gz \
  --directory $installdir $pkgname
