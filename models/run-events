#!/usr/bin/env python3

import argparse
import datetime
from itertools import chain, repeat
import logging
import math
import os
import signal
import subprocess
import sys

import numpy as np
import h5py

import freestream
import frzout


def run_cmd(*args):
    """
    Run and log a subprocess.

    """
    cmd = ' '.join(args)
    logging.info('running command: %s', cmd)

    try:
        proc = subprocess.run(
            cmd.split(), check=True,
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
            universal_newlines=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(
            'command failed with status %d:\n%s',
            e.returncode, e.output.strip('\n')
        )
        raise
    else:
        logging.debug(
            'command completed successfully:\n%s',
            proc.stdout.strip('\n')
        )
        return proc


class Parser(argparse.ArgumentParser):
    """
    ArgumentParser that parses files with 'key = value' lines.

    """
    def __init__(self, *args, fromfile_prefix_chars='@', **kwargs):
        super().__init__(
            *args, fromfile_prefix_chars=fromfile_prefix_chars, **kwargs
        )

    def convert_arg_line_to_args(self, arg_line):
        # split each line on = and prepend prefix chars to first arg so it is
        # parsed as a long option
        args = [i.strip() for i in arg_line.split('=', maxsplit=1)]
        args[0] = 2*self.prefix_chars[0] + args[0]
        return args


parser = Parser(description='run heavy-ion collision events')

parser.add_argument(
    'results', type=os.path.abspath,
    help='results output file'
)
parser.add_argument(
    '--buffering', type=int, default=0,
    help='results file buffer size'
)
parser.add_argument(
    '--nevents', type=int,
    help='number of events to run (default: run until interrupted)'
)
parser.add_argument(
    '--rankvar',
    help='environment variable containing process rank'
)
parser.add_argument(
    '--rankfmt',
    help='format string for rank integer'
)
parser.add_argument(
    '--workdir', default='.', type=os.path.abspath,
    help='working directory (default: the current directory)'
)
parser.add_argument(
    '--logfile', type=os.path.abspath,
    help='log file (default: stdout)'
)
parser.add_argument(
    '--loglevel', choices=['debug', 'info', 'warning', 'error', 'critical'],
    default='info',
    help='log level (default: %(default)s)'
)
parser.add_argument(
    '--nucleon-width', type=float, default=.5,
    help='trento nucleon width [fm] (default: %(default)s fm)'
)
parser.add_argument(
    '--trento-args', default='Pb Pb',
    help="arguments passed to trento (default: '%(default)s')"
)
parser.add_argument(
    '--tau-fs', type=float, default=.5,
    help='free streaming time [fm] (default: %(default)s fm)'
)
parser.add_argument(
    '--hydro-args', default='',
    help='arguments passed to osu-hydro (default: empty)'
)
parser.add_argument(
    '--Tswitch', type=float, default=.150,
    help='particlization temperature [GeV] (default: %(default).3f GeV)'
)


class StopEvent(Exception):
    """ Raise to end an event early. """


def run_events(args, results_file):
    """
    Run events as determined by user input:

        - Read options from `args`, as returned by `parser.parse_args()`.
        - Write results to binary file object `results_file`.

    Return True if at least one event completed successfully, otherwise False.

    """
    grid_step = .15*args.nucleon_width
    grid_n = math.ceil(2*15/grid_step)
    grid_max = .5*grid_n*grid_step
    logging.info(
        'grid step = %.6f fm, n = %d, max = %.6f fm',
        grid_step, grid_n, grid_max
    )

    def _initial_conditions(nevents=10, initial_file='initial.hdf'):
        """
        Run trento and yield HDF5 datasets.

        """
        try:
            os.remove(initial_file)
        except FileNotFoundError:
            pass

        run_cmd(
            'trento',
            '--number-events {}'.format(nevents),
            '--grid-step {} --grid-max {}'.format(grid_step, grid_max),
            '--output', initial_file,
            '--nucleon-width {}'.format(args.nucleon_width),
            args.trento_args
        )

        with h5py.File(initial_file, 'r') as f:
            yield from f.values()

    # if nevents was specified, generate that number of initial conditions
    # otherwise generate indefinitely
    initial_conditions = (
        chain.from_iterable(_initial_conditions() for _ in repeat(None))
        if args.nevents is None else
        _initial_conditions(args.nevents)
    )

    # create sampler HRG object (to be reused for all events)
    hrg_kwargs = dict(species='urqmd', res_width=True)
    hrg = frzout.HRG(args.Tswitch, **hrg_kwargs)

    # append switching energy density to hydro arguments
    eswitch = hrg.energy_density()
    hydro_args = [args.hydro_args, 'edec={}'.format(eswitch)]

    # arguments for "coarse" hydro pre-runs
    # no viscosity, run down to low temperature 120 MeV
    hydro_args_coarse = [
        'etas_hrg=0 etas_min=0 etas_slope=0 zetas_max=0 zetas_width=0',
        'edec={}'.format(frzout.HRG(.12, **hrg_kwargs).energy_density())
    ]

    def run_hydro(fs, event_size, coarse=False, dt_ratio=.25):
        """
        Run the initial condition contained in FreeStreamer object `fs` through
        osu-hydro on a grid with approximate physical size `event_size` [fm].
        Return a dict of freeze-out surface data suitable for passing directly
        to frzout.Surface.

        Initial condition arrays are cropped or padded as necessary.

        If `coarse` is an integer > 1, use only every `coarse`th cell from the
        initial condition arrays (thus increasing the physical grid step size
        by a factor of `coarse`).  Ignore the user input `hydro_args` and
        instead run ideal hydro down to a low temperature.

        `dt_ratio` sets the timestep as a fraction of the spatial step
        (dt = dt_ratio * dxy).  The SHASTA algorithm requires dt_ratio < 1/2.

        """
        dxy = grid_step * (coarse or 1)
        ls = math.ceil(event_size/dxy)  # the osu-hydro "ls" parameter
        n = 2*ls + 1  # actual number of grid cells

        for fmt, f, arglist in [
                ('ed', fs.energy_density, [()]),
                ('u{}', fs.flow_velocity, [(1,), (2,)]),
                ('pi{}{}', fs.shear_tensor, [(1, 1), (1, 2), (2, 2)]),
        ]:
            for a in arglist:
                X = f(*a)

                if coarse:
                    X = X[::coarse, ::coarse]

                diff = X.shape[0] - n
                start = int(abs(diff)/2)

                if diff > 0:
                    # original grid is larger -> cut out middle square
                    s = slice(start, start + n)
                    X = X[s, s]
                elif diff < 0:
                    # original grid is smaller
                    #  -> create new array and place original grid in middle
                    Xn = np.zeros((n, n))
                    s = slice(start, start + X.shape[0])
                    Xn[s, s] = X
                    X = Xn

                X.tofile(fmt.format(*a) + '.dat')

        dt = dxy*dt_ratio

        run_cmd(
            'osu-hydro',
            't0={} dt={} dxy={} nls={}'.format(args.tau_fs, dt, dxy, ls),
            *(hydro_args_coarse if coarse else hydro_args)
        )

        surface = np.fromfile('surface.dat', dtype='f8').reshape(-1, 16)

        # end event if the surface is empty -- this occurs in ultra-peripheral
        # events where the initial condition doesn't exceed Tswitch
        if surface.size == 0:
            raise StopEvent('empty surface')

        # surface columns:
        #   0    1  2  3         4         5         6    7
        #   tau  x  y  dsigma_t  dsigma_x  dsigma_y  v_x  v_y
        #   8     9     10    11    12    13    14    15
        #   pitt  pitx  pity  pixx  pixy  piyy  pizz  Pi

        # pack surface data into a dict suitable for passing to frzout.Surface
        return dict(
            zip(['x', 'sigma', 'v'], np.hsplit(surface, [3, 6, 8])),
            pi=dict(zip(['xx', 'xy', 'yy'], surface.T[11:14])),
            Pi=surface.T[15]
        )

    # species (name, ID) for identified particle observables
    species = [
        ('pion', 211),
        ('kaon', 321),
        ('proton', 2212),
    ]

    # fully specify numeric data types, including endianness and size, to
    # ensure consistency across all machines
    float_t = '<f8'
    int_t = '<i8'
    complex_t = '<c16'

    # results "array" (one element)
    # to be overwritten for each event
    results = np.empty((), dtype=[
        ('initial_entropy', float_t),
        ('mult_factor', float_t),
        ('nsamples', int_t),
        ('dNch_deta', float_t),
        ('dN_dy', [(s, float_t) for (s, _) in species]),
        ('mean_pT', [(s, float_t) for (s, _) in species]),
        ('M', int_t),
        ('Qn', complex_t, 6),
    ])

    def run_single_event(ic):
        """
        Run the initial condition event contained in HDF5 dataset object `ic`
        and save observables to `results`.

        """
        results.fill(0)
        results['initial_entropy'] = ic.attrs['mult']

        # read initial density array from dataset
        density = np.array(ic)

        assert all(n == grid_n for n in density.shape)

        logging.info(
            'free streaming initial condition for %.3f fm',
            args.tau_fs
        )
        fs = freestream.FreeStreamer(density, grid_max, args.tau_fs)

        e = fs.energy_density()
        e_above = e[e > eswitch].sum()
        results['mult_factor'] = e.sum()/e_above if e_above > 0 else 1

        # run coarse event on large grid and determine max radius
        rmax = math.sqrt((
            run_hydro(fs, event_size=25, coarse=3)['x'][:, 1:3]**2
        ).sum(axis=1).max())
        logging.info('rmax = %.3f fm', rmax)

        # now run normal event with size set to the max radius
        # and create sampler surface object
        surface = frzout.Surface(**run_hydro(fs, event_size=rmax), ymax=2)
        logging.info('%d freeze-out cells', len(surface))

        minsamples, maxsamples = 10, 1000  # reasonable range for nsamples
        minparts = 10**5  # min number of particles to sample
        nparts = 0  # for tracking total number of sampled particles

        logging.info('sampling surface with frzout')

        # sample particles and write to file
        with open('particles_in.dat', 'w') as f:
            for nsamples in range(1, maxsamples + 1):
                parts = frzout.sample(surface, hrg)
                if parts.size == 0:
                    continue
                nparts += parts.size
                print('#', parts.size, file=f)
                for p in parts:
                    print(p['ID'], *p['x'], *p['p'], file=f)
                if nparts >= minparts and nsamples >= minsamples:
                    break

        logging.info('produced %d particles in %d samples', nparts, nsamples)

        if nparts == 0:
            raise StopEvent('no particles produced')

        # try to free some memory
        # (up to ~a few hundred MiB for ultracentral collisions)
        del surface

        results['nsamples'] = nsamples

        # hadronic afterburner
        run_cmd('afterburner particles_in.dat particles_out.dat')

        # read final particle data
        with open('particles_out.dat', 'rb') as f:
            parts = np.fromiter(
                (tuple(l.split()) for l in f if not l.startswith(b'#')),
                dtype=[
                    ('ID', int),
                    ('charge', int),
                    ('pT', float),
                    ('phi', float),
                    ('y', float),
                    ('eta', float),
                ]
            )

        logging.info('computing observables')
        charged = (parts['charge'] != 0)
        abs_eta = np.fabs(parts['eta'])

        results['dNch_deta'] = \
            np.count_nonzero(charged & (abs_eta < .5)) / nsamples

        abs_ID = np.abs(parts['ID'])
        midrapidity = (np.fabs(parts['y']) < .5)

        pT = parts['pT']
        phi = parts['phi']

        for name, i in species:
            cut = (abs_ID == i) & midrapidity
            N = np.count_nonzero(cut)
            results['dN_dy'][name] = N / nsamples
            results['mean_pT'][name] = (0. if N == 0 else pT[cut].mean())

        phi_alice = phi[charged & (abs_eta < .8) & (.2 < pT) & (pT < 5.)]
        results['M'] = phi_alice.size
        results['Qn'] = [np.exp(1j*n*phi_alice).sum() for n in range(1, 7)]

    nfail = 0

    # run each initial condition event and save results to file
    for n, ic in enumerate(initial_conditions, start=1):
        logging.info('starting event %d', n)

        try:
            run_single_event(ic)
        except StopEvent as e:
            logging.info('event stopped: %s', e)
        except Exception:
            logging.exception('event %d failed', n)
            nfail += 1
            if nfail > 3 and nfail/n > .5:
                logging.critical('too many failures, stopping events')
                break
            logging.warning('continuing to next event')
            continue

        results_file.write(results.tobytes())
        logging.info('event %d completed successfully', n)

    return n > nfail


def main():
    args = parser.parse_args()

    # must handle rank before setting up logging since it affects the log file
    if args.rankvar:
        rank = os.getenv(args.rankvar)
        if rank is None:
            print(
                'rank variable {} is not set'.format(args.rankvar),
                file=sys.stderr
            )
            sys.exit(1)

        if args.rankfmt:
            rank = args.rankfmt.format(int(rank))

        argdict = vars(args)

        # append rank to path arguments, e.g.:
        #   /path/to/output.log  ->  /path/to/output/<rank>.log
        for arg in ['workdir', 'results', 'logfile']:
            if argdict[arg] is not None:
                root, ext = os.path.splitext(argdict[arg])
                argdict[arg] = os.path.join(root, rank) + ext

    os.makedirs(args.workdir, exist_ok=True)
    os.chdir(args.workdir)

    os.makedirs(os.path.dirname(args.results), exist_ok=True)

    if args.logfile is None:
        logfile_kwargs = dict(stream=sys.stdout)
    else:
        logfile_kwargs = dict(filename=args.logfile, filemode='w')
        os.makedirs(os.path.dirname(args.logfile), exist_ok=True)

    logging.basicConfig(
        level=getattr(logging, args.loglevel.upper()),
        format='[%(levelname)s@%(relativeCreated)d] %(message)s',
        **logfile_kwargs
    )
    logging.captureWarnings(True)

    start = datetime.datetime.now()
    logging.info('started at %s', start)
    logging.info('arguments: %r', args)

    # translate SIGTERM to KeyboardInterrupt
    signal.signal(signal.SIGTERM, signal.default_int_handler)
    logging.debug('set SIGTERM handler')

    with open(args.results, 'wb', buffering=args.buffering) as f:
        try:
            status = run_events(args, f)
        except KeyboardInterrupt:
            # after catching the initial SIGTERM or interrupt, ignore them
            # during shutdown -- this ensures everything will exit gracefully
            # in case of additional signals (short of SIGKILL)
            signal.signal(signal.SIGTERM, signal.SIG_IGN)
            signal.signal(signal.SIGINT, signal.SIG_IGN)
            status = True
            logging.info(
                'interrupt or signal at %s, cleaning up...',
                datetime.datetime.now()
            )

    end = datetime.datetime.now()
    logging.info('finished at %s, %s elapsed', end, end - start)

    if not status:
        sys.exit(1)


if __name__ == "__main__":
    main()
