#!/bin/sh

# cannot use bash as the interpreter due to BASH_ENV nonsense, see below
if [[ $(basename $BASH) == 'bash' ]]; then
  echo "do not run this script with bash"
  echo "either execute it directly (i.e. as ./${0#./}) or use sh"
  exit 1
fi

if [[ ! $NERSC_HOST ]]; then
  echo 'this script should be run on a NERSC machine'
  exit 1
elif [[ $(realpath $CONDA_PREFIX) != /global/common/software/* ]]; then
  echo 'activate a conda env in /global/common/software (see docs)'
  exit 1
fi

# Unfortunately, NERSC sets BASH_ENV=~/.bashrc, so .bashrc is sourced in bash
# scripts (see bash man page).  If PATH and/or CONDA_PREFIX are modified in
# .bashrc, it could deactivate a conda env.  To workaround this, use sh as the
# interpreter (see shebang line), which does not use BASH_ENV, and unset
# BASH_ENV here before calling local/install, which would otherwise again source
# .bashrc.
unset BASH_ENV

# set Intel compilers for cmake to detect
# set flags to compile for both Cori and Edison
export CC=icc CXX=icpc FC=ifort
export CFLAGS='-static -xAVX -axCORE-AVX-I,CORE-AVX2 -diag-disable=remark'
export CXXFLAGS=$CFLAGS FFLAGS=$CFLAGS

# for building python extensions
export LDSHARED="$CC -shared"
export PY_FLAGS="${CFLAGS/-static/-static-intel}"

# flags for GNU compilers
export GNU_FLAGS="-static -march=ivybridge -mtune=haswell -ffast-math"

# Since we're running in sh due to the BASH_ENV nonsense above, it is apparently
# sometimes necessary to explicitly source this to load the module command.
source /opt/modules/default/etc/modules.sh

# get the latest available version of a module
module_latest() {
  module avail $1 2>&1 | grep -o "$1/[0-9\.]\+" | sort --version-sort | tail -1
}

module load $(module_latest cmake) boost cray-hdf5

# install to the conda env
"$(dirname "$0")"/../local/install
